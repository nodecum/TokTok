# TokTok auf dem OlinuXino

Das TokTok Netzwerk ist ein Peer to Peer (gleicher unter gleichen) Netzwerk welches das Internet als Medium für den Informationsaustausch benutzt. Dabei müssen die beteiligten Rechner (Nodes) nicht über eine öffentliche IP Adresse erreichbar sein. Die Verwaltung der Verbindungsinformationen erfolgt verteilt im Netz, ohne das Administrative Handlungen auszuführen sind.
=> https://toktok.ltd TokTok
Es soll hier die Installation und Benutzung auf einem embedded Linux Rechner dargelegt werden. Der Grund das System auf einem solchem Rechner zu installieren ist, daß um zu jedem Zeitpunkt Nachrichten empfangen zu können der empfangende Rechner ständig erreichbar sein sollte.
## Die Hardware und das Betriebssystem
Prinzipiell eignet sich sicher jeder embedded Linux Rechner welcher eine Verbindung mit dem Internet herstellen kann. Wir haben uns für den ARM Server A20-OlinuXino-LIME2 der Firma Olimex enschieden. Dieser kann mit oder ohne Festplatte betrieben werden.
=> https://olimex.com Olimex
=> https://www.olimex.com/Products/OLinuXino/A20/A20-OLinuXino-LIME2/open-source-hardware A20-OLinuXino-LIME2 
### Das Abbild des Betriebsystems erzeugen
Wir nutzen die Version Jammy der Armbian Linux Distribution. Dies ist eine für ARM Boards angepasste Version von Ubuntu 22.04. Sie muß aber für unser konkretes Board A20-OLinuXino-LIME2 gebaut werden. Die Anleitung dazu findet sich unter Building Armbian. 
=> https://armbian.com Armbian
=> https://www.releases.ubuntu.com/jammy Ubuntu 22.04, Jammy Jellyfish
=> https://docs.armbian.com/Developer-Guide_Build-Preparation Building Armbian
Da der Bau nur auf einem speziell eingerichtetm Betriebssystem erfolgen kann, wird dieses auf einem virtuellem Rechner eingerichtet. Dazu wird die Virtualisierungs-Software VirtualBox installiert. Das virtuelle Laufwerk sollte mindestens 50GB groß sein.
=> https://www.virtualbox.org/wiki/Downloads VirtualBox
```
$ sudo adduser myuser vboxusers
$ wget https://www.releases.ubuntu.com/jammy/ubuntu-22.04.3-live-server-amd64.iso
```
Will man ssh benutzen um auf dem virtuellen System zu arbeiten, dann sollte z.B. auf dem virtuellen Rechner unter der Einstellung Netzwerk die Einstellung Netzwerkbrücke mit dem Namen wls6 gewählt werden. Dann kann man den Server im lokalen Netz auffinden und mittels ssh kontaktieren.

Dann bauen wir Armbian:
```
$ sudo apt-get -y -qq install git  
$ git clone --depth=1 --branch=main https://github.com/armbian/build  
$ cd build  
$ ./compile.sh BOARD=lime2 BRANCH=current RELEASE=jammy
```
Das sollte unser gewünschtes Betriebssystem-Abbild erzeugen,
welches wir dann mittels `scp` auf unseren realen Rechner kopieren:
```
Armbian-unofficial_24.2.0-trunk_Lime2_jammy_current_6.6.11_minimal.img
```
Wir stellen einen Link zu dem erzeugtem Abbild, der SHA Prüfsumme und Inhaltsangabe zur Verfügung:
=> armbian/Armbian-unofficial_24.2.0-trunk_Lime2_jammy_current_6.6.11_minimal.img.xz img.xz
=> armbian/Armbian-unofficial_24.2.0-trunk_Lime2_jammy_current_6.6.11_minimal.img.sha sha 
=> armbian/Armbian-unofficial_24.2.0-trunk_Lime2_jammy_current_6.6.11_minimal.img.txt txt
### Micro-SD Karte beschreiben 
Das Abbild des Betriebssystems kann mit dem Programm Balena Etcherd auf die Micro-SD Karte geschrieben und überprüft werden.
=> https://etcher.balena.io Balena Etcher
## Das Betriebssystem einrichten
### Verbindung über das Netzwerk
Der voreingestellte Name des Servers ist lime2. Sollten mehrere Rechner mit diesem Namen im LAN Netz verbunden sein, so könnte man mit dem Befehl
```
$ sudo nmap -sP 192.168.2.0/24
```
alle erreichbaren Rechner und ihre Adressen herausfinden. In unserem Fall hat das LAN Netz die Adresse `192.168.2.XXX`.

Nun benutzen wir die herausgefundene Adresse und loggen uns auf dem Rechner lime2 oder 192.168.2.xxx als Nutzer root mit dem Passwort 1234 ein:
```
$ ssh root@192.168.2.xxx
The authenticity of host 'lime2 (192.168.2.xxx)' can't be established.
ECDSA key fingerprint is SHA256:......................................
Are you sure you want to continue connecting (yes/no/[fingerprint])?
<= yes<Return>
```


